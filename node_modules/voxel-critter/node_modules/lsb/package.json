{
  "name": "lsb",
  "version": "0.1.0",
  "description": "Hide string data in the least-significant bits of an array/image",
  "main": "index.js",
  "devDependencies": {
    "clone": "~0.1.6",
    "tape": "~0.2.2",
    "debounce": "0.0.1",
    "browserify": "~2.4.0"
  },
  "scripts": {
    "test": "node test.js",
    "example": "node_modules/.bin/browserify example.js -o bundle.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/lsb.git"
  },
  "keywords": [
    "steganography",
    "image",
    "hide",
    "secret",
    "array",
    "encode",
    "decode",
    "least",
    "significant",
    "bit"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "license": "MIT",
  "readme": "# lsb [![Build Status](https://secure.travis-ci.org/hughsk/lsb.png?branch=master)](http://travis-ci.org/hughsk/lsb) #\n\nHide string data in the least-significant bits of an array. It's an easy way\nof, say, storing information in images invisibly. Note that if you're trying\nto hide something important you should probably use something else :)\n\n## Installation ##\n\n``` bash\n$ npm install lsb\n```\n\n## Usage ##\n\n`require('lsb').encode(channel, stegotext, [iterator])`\n\nWhere `channel` is the array to hide the `stegotext` string in. `iterator` is\nan optional callback for determining the index of eachÂ hidden byte, if you want\nto get tricky.\n\n`require('lsb').decode(channel, [iterator])`\n\nOnce encodeded, use this on the same `channel` array to return the hidden\nstring. If you used an `iterator` callback before, you'll need to use it again\nhere or you'll get garbage text.\n",
  "readmeFilename": "README.md",
  "_id": "lsb@0.1.0",
  "dist": {
    "shasum": "8155f6cbc2e2f3af9aecbf59d1c4feec66a88d2e"
  },
  "_from": "lsb@~0.1.0",
  "_resolved": "https://registry.npmjs.org/lsb/-/lsb-0.1.0.tgz"
}
