{
  "name": "voxel-creature",
  "version": "0.1.0",
  "description": "create creatures for voxel.js",
  "main": "index.js",
  "dependencies": {
    "inherits": "~1.0.0"
  },
  "devDependencies": {
    "voxel-engine": "~0.5.7",
    "voxel-player": "~0.0.2",
    "voxel": "~0.1.5"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/voxel-creature.git"
  },
  "homepage": "https://github.com/substack/voxel-creature",
  "keywords": [
    "voxel",
    "creature",
    "game"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# voxel-creature\n\ncreate creatures for [voxel.js](http://voxeljs.com)\n\n# example\n\n``` js\nvar createGame = require('voxel-engine');\nvar voxel = require('voxel');\nvar game = createGame({\n    generate: voxel.generator['Valley'],\n    texturePath: '/textures/'\n});\ngame.appendTo('#container');\n\nvar createPlayer = require('voxel-player')(game);\nvar substack = createPlayer('substack.png');\nsubstack.possess();\nwindow.substack = substack;\n\nwindow.addEventListener('keydown', function (ev) {\n    if (ev.keyCode === 'R'.charCodeAt(0)) {\n        substack.toggle();\n    }\n});\n\nvar createCreature = require('../')(game);\nvar creature = createCreature((function () {\n    var T = game.THREE;\n    var body = new T.Object3D;\n    \n    var head = new T.Mesh(\n        new T.CubeGeometry(10, 10, 10),\n        new T.MeshLambertMaterial({\n            color: 0x800830,\n            ambient: 0x800830\n        })\n    );\n    head.position.set(0, 5, 0);\n    body.add(head);\n    \n    var eyes = [0,1].map(function () {\n        var eye = new T.Mesh(\n            new T.CubeGeometry(1, 1, 1),\n            new T.MeshLambertMaterial({\n                color: 0xffffff,\n                ambient: 0xffffff\n            })\n        );\n        body.add(eye);\n        return eye;\n    });\n    eyes[0].position.set(2, 8, 5);\n    eyes[1].position.set(-2, 8, 5);\n    \n    return body;\n})());\nwindow.creature = creature;\n \ncreature.position.y = 200;\ncreature.position.x = Math.random() * 300 - 150;\ncreature.position.z = Math.random() * 300 - 150;\n\ncreature.on('block', function () { creature.jump() });\ncreature.notice(substack, { radius: 500 });\n\ncreature.on('notice', function (player) {\n    creature.lookAt(player);\n    creature.move(0, 0, 0.5);\n});\n\nsetInterval(function () {\n    if (creature.noticed) return;\n    creature.rotation.y += Math.random() * Math.PI / 2 - Math.PI / 4;\n    creature.move(0, 0, 0.5 * Math.random());\n}, 1000);\n```\n\n# methods\n\n``` js\nvar voxelCreature = require('voxel-creature')\n```\n\n## var createCreature = voxelCreature(game)\n\nReturn a function `createCreature` for making creatures given a\n[voxel-engine](https://github.com/maxogden/voxel-engine) `game` instance.\n\n## var creature = createCreature(obj, opts={})\n\nCreate a creature with the three.js 3d object (use game.THREE) `obj`.\n\nControl the bounding box size with a vector3 `opts.dims` and the force\n(like gravity) for the object to be subject to with `opts.force`.\n\nThe default `opts.dims` is `[10,10,10]`.\nThe default `opts.force` is `[0,-0.00009,0]`.\n\n## creature.jump(power=1)\n\nJump upward.\n\n## creature.move(x, y, z)\n\nMove the creature `[x,y,z]` smoothly by altering its velocity.\n\n## creature.lookAt(target)\n\nTurn toward the 3d object `target`.\n`target` should be a 3d vector itself or it should have a `target.position`.\n\n## creature.notice(target, opts)\n\nReturn an interval for detecting the presence of `target`.\n`target` should be a 3d vector itself or it should have a `target.position`.\n\nThe `opts.radius` controls how nearby `target` needs to be to trigger a\n`'notice'` event. Otherwise `'frolic'` events fire.\nThe default `opts.radius` is `500`.\n\nThe `opts.collisionRadius` controls how nearby `target` needs to be to trigger a\n`'collide'` event.\nThe default `opts.collisionRadius` is `25`.\n\nThe `opts.interval` controls how often to check the distance to `target`.\nThe default `opts.interval` is `1000`.\n\n# events\n\n## creature.on('notice', function (target) {})\n\nWhen `target` is within the radius configured by `creature.notice()`, the\n`'notice'` event fires.\n\n## creature.on('collide', function (target) {})\n\nWhen `target` is within the collision radius configured in `creature.notice()`,\nthe `'collide'` event fires.\n\n## creature.on('block', function () {})\n\nWhen a creature is constrained by a block in front of it, the `'block'` event\nfires. A good thing to try when a creature is blocked is to jump.\n\n# attributes\n\n## creature.position\n\ncontrol the creature item position\n\n## creature.rotation\n\ncontrol the creature item rotation\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install voxel-creature\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "_id": "voxel-creature@0.1.0",
  "_from": "voxel-creature@"
}
