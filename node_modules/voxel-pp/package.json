{
  "name": "voxel-pp",
  "version": "0.0.4",
  "description": "GLSL post-processing module for Voxel.js",
  "main": "index.js",
  "scripts": {
    "start": "echo \"open localhost:8080/\" && ./node_modules/.bin/browserify demo.js -o bundle.js -d && node_modules/.bin/serve . -p 8080",
    "prepublish": "./node_modules/.bin/browserify demo.js -o bundle.js"
  },
  "keywords": [
    "voxel",
    "post-processing",
    "three",
    "shader",
    "glsl",
    "fragment",
    "image",
    "graphics"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com"
  },
  "license": "MIT",
  "dependencies": {
    "three-effectcomposer": "0.0.1"
  },
  "devDependencies": {
    "browserify": "~1.17.2",
    "serve": "~1.1.0",
    "minecraft-skin": "0.0.1",
    "voxel": "~0.1.1",
    "voxel-debris": "0.0.4",
    "voxel-engine": "~0.3.8"
  },
  "readme": "## voxel-pp ##\n\nGLSL post-processing module for Voxel.js! This is a wrapper for\n[@alteredq](http://github.com/alteredq)'s `THREE.EffectComposer`, which allows\nyou to stack fragment shaders for nice effects such as Bloom, Blur, Mosaic\nFilters and so on.\n\nThe [demo](http://hughsk.github.com/voxel-pp) is somewhat less graceful,\nbut you get the idea.\n\n## Installation ##\n\n``` bash\nnpm install voxel-pp\n```\n\n## Usage ##\n\n**`postprocessor(game)`**\n\nEnable post processing.\n\n**`postprocessor(game).use(fragmentShader)`**\n\nAdd a shader pass using the `fragmentShader` string. Includes\n`sampler2D tDiffuse` (the screen texture) and `vec2 vUv` (the current pixel)\nby default.\n\n**`postprocessor(game).use(options)`**\n\nSame as above, but takes an object instead with the following properties,\nall optional:\n\n* `fragmentShader`\n* `vertexShader`\n* `uniforms`\n\n**`postprocessor(game).addPass(pass)`**\n\nEquivalent to `EffectComposer.addPass` - the following pass types are exposed\nwith each instance of `voxel-pp`:\n\n* `postprocessor(game).ShaderPass`\n* `postprocessor(game).RenderPass`\n* `postprocessor(game).MaskPass`\n* `postprocessor(game).ClearMaskPass`\n\nThis method also returns the pass instead of the `voxel-pp` instance, so you\ncan play around with it directly.\n\n**`postprocessor(game).addPass(type, params, ...)`**\n\nTo keep things clean, you can pass the string name of the pass\n(e.g. `ShaderPass` or `MaskPass`) as the first argument, and the parameters\nas the rest:\n\n`postprocessor(game).addPass('MaskPass', scene, camera)`\n\n## Example ##\n\nSee [`demo.js`](http://github.com/hughsk/voxel-pp/blob/master/demo.js) for the\ncode used in the demo.\n\n``` javascript\nvar game = require('voxel-engine')()\n  , voxelpp = require('voxel-pp')\n\nvar postprocessor = voxelpp(game)\n\npostprocessor\n  .use(require('./some/fragment/shader.fs'))\n  .use({\n    fragmentShader: require('./another/fragment/shader.fs'),\n    uniforms: {\n      amount: { type: 'f', value: 1 }\n    }\n  })\n```\n",
  "readmeFilename": "README.md",
  "_id": "voxel-pp@0.0.4",
  "_from": "voxel-pp@"
}
